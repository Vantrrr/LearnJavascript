Những lệnh Git cơ bản thường dùng:
1. Git version: Kiểm tra phiên bản của Git.
    $ git --v

2. Git config: Định cấu hình các biến cấu hình chung – Nếu đang làm việc với các developer khác, bạn sẽ cần biết ai đang kiểm tra mã xuất nhập và thực hiện thay đổi.
    $ git config --g user.name "Dev name"
    $ git config --g user.email "Dev email"
    $ git config --list

3. Git help
    $ git help -a or $ git help --all - Hướng dẫn bạn có thể làm được những gì, tất cả các lệnh có thể.
    $ git config --help or $ git help config - Đưa bạn tới trang hướng dẫn chính thống của Git.
    $ git command -help . Xem tất cả các tùy chọn có sẵn cho lệnh cụ thể

4. Git mkdir 
    $ git mkdir folder_name  - Tạo repository trong hệ thống local.
    $ cd folder_name - Di chuyển đến folder_name repository vừa tạo ra.

5. Git remote
    $ git remote add origin https... <url> - Liên kết đến remote repository (local & GitHub)
    $ git remote set-url <name> <new url> - Thay đổi địa chỉ của remote repository đã Liên kết vào địa chỉ của <new url>.
    $ git remote rename <old> <new> - Thay đổi tên của remote repository đã Liên kết.

6. Git init
    $ git init (Khởi tạo git trong thư mục dự án của bạn) - Lệnh này được dùng khi bạn muốn tạo một phiên bản git mới cho một dự án.

7. Git status: Kiểm tra trạng thái của kho lưu trữ
    $ git status
    $ git status --short 

        ?? - Tập tin không bị theo dõi
        A - Tệp được thêm vào giai đoạn
        M - Tệp đã sửa đổi
        D - Các tệp đã xóa

8. Git add: Add những thay đổi (bạn đã tạo mới hoặc chỉnh sửa) để thực hiện commit.
    $ git add .   (Chú ý dấu chấm)    
    Hoặc:
    $ git add --all  (git add -A)
    $ git add index.html (có thể chỉ định trực tiếp tên tệp cần add)

9. Git commit: 
    $ git commit -m "Thông điệp của bạn"
    Git commit: Ghi lại các thay đổi vào kho lưu trữ. (Cần thêm các thông điệp rõ ràng vào mỗi mục commit)

10. Git diff:
    $ git diff So sánh sự khác biệt kể từ lần commit cuối cùng của bạn.
    $ git log Xem lịch sử làm việc với git (lịch sử commit)

11. Git push
    $ git push -u origin branch_mane - Push (đẩy) branch vào remote repository.
    $ git push - Push (đẩy) tất cả mọi thay đổi (đã commit) lên remote repository.
    $ git push -d origin branch_mane - Xóa một branch trên remote repository.
    $ git push -f origin branch_mane - Push force sẽ apply toàn bộ log ở local của bạn lên branch ở repo, bất chấp log 2 nơi khác nhau.

12. Git branch
    $ git branch -M branch_mane (main) - Đổi tên nhánh chính.
    $ git branch- Kiểm tra các nhánh hiện có của bạn ở local.
    $ git branch -c branch_mane Hoặc:
    $ git checkout -b branch_mane (Tạo và chuyển luôn sang nhánh mới) - Tạo một nhánh có tên “branch_mane” và hợp nhất (merge) nó với nhánh chính.
    $ git branch -d branch_mane - Xóa một nhánh tại local có tên: "branch_mane" (branch đã được hợp nhất (push) vào remote repository)
    $ git branch -D branch_mane - Xóa một nhánh tại local có tên: "branch_mane" (branch đã commit nhưng chưa hợp nhất vào remote repository)
    $ git branch -a - Kiểm tra các branch hiện có trên remote repo của bạn.

13. Git checkout
    $ git checkout -b branch_mane (Tạo và chuyển luôn sang nhánh mới)
    $ git checkout branch_mane - Lệnh trên giúp di chuyển không gian làm việc, kiểm tra tệp giữa các branch_mane.

14. Git fectch: Git fetch cho phép CẬP NHẬT để xem điều gì đã thay đổi trên GitHub của bạn.
    $ git fetch origin

15. Git merge: merge kết hợp nhánh hiện tại, với một nhánh được chỉ định.

16. Git pull
    $ git pull origin main - Git pull kéo tất cả các thay đổi từ main về local.
    $ git pull - Git pull kéo tất cả các thay đổi từ branch_mane về local.
    $ git pull origin - Git pull kéo tất cả các thay đổi từ kho lưu trữ từ xa vào branch bạn đang làm việc. (pull là sự kết hợp của 2 lệnh khác nhau: fetch và merge)
    $ git pull --rebase (Cach pull chống xung đột)

17. Git clone
    $ git clone <url>  (Địa chỉ dự án bạn muốn Clone) - Clone dự án có sẵn trên GitHub. 
    $ git clone <url> folder_name - Clone đồng thời đổi tên dự án theo ý bạn khi save vào local.

18. Git stash
    $ git stash save # Hoặc $ git stash - Lưu lại công việc đang làm ở branch này để chuyển sang branch khác (Khi bạn chưa muốn commit code)
    $ git stash list - Xem lại lịch sử thay đổi.
    $ git stash show stash@{n} - Xem lại lịch sử thay đổi cụ thể của lần stash save{n}.
    $ git stash apply stash@{1} - Apply thay đổi của lần stash save{n}.
    $ git stash clear - Xoá toàn bộ stash.

19. Git rebase: Hợp nhất code
    $ git rebase branch_mane2 (Code từ branch_mane2 được hợp nhất vào branch_mane1)



